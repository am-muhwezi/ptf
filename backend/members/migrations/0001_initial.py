# Generated by Django 5.2.3 on 2025-07-31 00:25

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Member",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("phone", models.CharField(blank=True, max_length=15, null=True)),
                ("address", models.TextField(blank=True, null=True)),
                ("dateOfBirth", models.DateField(blank=True, null=True)),
                (
                    "membership_type",
                    models.CharField(
                        choices=[
                            ("indoor", "Indoor"),
                            ("outdoor", "Outdoor"),
                            ("both", "Both"),
                        ],
                        default="indoor",
                        max_length=10,
                    ),
                ),
                (
                    "plan_type",
                    models.CharField(
                        choices=[
                            ("Monthly", "Monthly"),
                            ("Quarterly", "Quarterly"),
                            ("Bi-Annual", "Bi-Annual"),
                            ("Yearly", "Yearly"),
                        ],
                        default="basic",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("suspended", "Suspended"),
                        ],
                        default="active",
                        max_length=10,
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("paid", "Paid"),
                            ("pending", "Pending"),
                            ("overdue", "Overdue"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                (
                    "bloodGroup",
                    models.CharField(
                        choices=[
                            ("A+", "A+"),
                            ("A-", "A-"),
                            ("B+", "B+"),
                            ("B-", "B-"),
                            ("AB+", "AB+"),
                            ("AB-", "AB-"),
                            ("O+", "O+"),
                            ("O-", "O-"),
                            ("nil", "Not Specified"),
                        ],
                        default="nil",
                        max_length=3,
                    ),
                ),
                (
                    "idPassport",
                    models.CharField(blank=True, max_length=50, null=True, unique=True),
                ),
                (
                    "emergencyContact",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "emergencyPhone",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                (
                    "medicalConditions",
                    models.TextField(blank=True, max_length=500, null=True),
                ),
                (
                    "height",
                    models.FloatField(blank=True, help_text="Height in cm", null=True),
                ),
                (
                    "weight",
                    models.FloatField(blank=True, help_text="Weight in kg", null=True),
                ),
                ("body_fat_percentage", models.FloatField(blank=True, null=True)),
                (
                    "fitness_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                            ("athlete", "Athlete"),
                        ],
                        max_length=12,
                        null=True,
                    ),
                ),
                ("strength_test_results", models.TextField(blank=True, null=True)),
                ("cardio_test_results", models.TextField(blank=True, null=True)),
                ("flexibility_test_results", models.TextField(blank=True, null=True)),
                ("short_term_goals", models.TextField(blank=True, null=True)),
                ("long_term_goals", models.TextField(blank=True, null=True)),
                ("registrationDate", models.DateTimeField(auto_now_add=True)),
                ("membership_start_date", models.DateField(blank=True, null=True)),
                ("membership_end_date", models.DateField(blank=True, null=True)),
                ("last_visit", models.DateTimeField(blank=True, null=True)),
                ("is_checked_in", models.BooleanField(default=False)),
                ("total_visits", models.PositiveIntegerField(default=0)),
                (
                    "amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("last_payment", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-registrationDate"],
            },
        ),
    ]
